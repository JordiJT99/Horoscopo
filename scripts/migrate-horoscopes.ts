import { HoroscopeBatchGenerator } from '../src/lib/horoscope-batch-generator';
import { subDays, addDays } from 'date-fns';

/**
 * Script de migraci√≥n para generar hor√≥scopos hist√≥ricos
 * Ejecutar con: npx tsx scripts/migrate-horoscopes.ts
 */
async function migrateHistoricalHoroscopes() {
  console.log('üöÄ Iniciando migraci√≥n de hor√≥scopos hist√≥ricos...');
  
  const today = new Date();
  
  try {
    // Generar hor√≥scopos para los √∫ltimos 7 d√≠as
    console.log('üìÖ Generando hor√≥scopos para los √∫ltimos 7 d√≠as...');
    for (let i = 7; i >= 1; i--) {
      const date = subDays(today, i);
      console.log(`‚è≥ Procesando ${date.toISOString().split('T')[0]}`);
      await HoroscopeBatchGenerator.generateCompleteHoroscopesForDate(date);
    }
    
    // Generar hor√≥scopos para hoy
    console.log('üìÖ Generando hor√≥scopos para hoy...');
    await HoroscopeBatchGenerator.generateCompleteHoroscopesForDate(today);
    
    // Generar hor√≥scopos para los pr√≥ximos 3 d√≠as
    console.log('üìÖ Generando hor√≥scopos para los pr√≥ximos 3 d√≠as...');
    for (let i = 1; i <= 3; i++) {
      const date = addDays(today, i);
      console.log(`‚è≥ Procesando ${date.toISOString().split('T')[0]}`);
      await HoroscopeBatchGenerator.generateCompleteHoroscopesForDate(date);
    }
    
    console.log('üéâ Migraci√≥n completada exitosamente');
    console.log('üí° Tip: Configura un cron job para mantener los hor√≥scopos actualizados');
    
  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
    process.exit(1);
  }
}

// Funci√≥n para generar solo los pr√≥ximos d√≠as (√∫til para testing)
async function generateNextDays(days: number = 7) {
  console.log(`üöÄ Generando hor√≥scopos para los pr√≥ximos ${days} d√≠as...`);
  
  try {
    await HoroscopeBatchGenerator.generateHoroscopesForNextDays(days);
    console.log('‚úÖ Generaci√≥n completada');
  } catch (error) {
    console.error('‚ùå Error durante la generaci√≥n:', error);
    process.exit(1);
  }
}

// Detectar argumentos de l√≠nea de comandos
const args = process.argv.slice(2);
const command = args[0];

if (command === 'next') {
  const days = parseInt(args[1]) || 7;
  generateNextDays(days);
} else if (command === 'historical' || !command) {
  migrateHistoricalHoroscopes();
} else {
  console.log('Uso:');
  console.log('  npx tsx scripts/migrate-horoscopes.ts [comando]');
  console.log('');
  console.log('Comandos:');
  console.log('  historical (default) - Migra hor√≥scopos hist√≥ricos y futuros');
  console.log('  next [d√≠as]          - Genera solo hor√≥scopos futuros (default: 7 d√≠as)');
  console.log('');
  console.log('Ejemplos:');
  console.log('  npx tsx scripts/migrate-horoscopes.ts');
  console.log('  npx tsx scripts/migrate-horoscopes.ts next 3');
}
